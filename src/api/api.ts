/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * freecloud API
 * This is the API for the freecloud server.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost/api/v1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface FileInfo
 */
export interface FileInfo {
    /**
     * 
     * @type {number}
     * @memberof FileInfo
     */
    ID?: number;
    /**
     * 
     * @type {string}
     * @memberof FileInfo
     */
    path?: string;
    /**
     * 
     * @type {string}
     * @memberof FileInfo
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FileInfo
     */
    isDir?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FileInfo
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof FileInfo
     */
    ownerID?: number;
    /**
     * 
     * @type {string}
     * @memberof FileInfo
     */
    mimeType?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FileInfo
     */
    starred?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FileInfo
     */
    parentID?: number;
    /**
     * 
     * @type {number}
     * @memberof FileInfo
     */
    shareID?: number;
    /**
     * 
     * @type {number}
     * @memberof FileInfo
     */
    lastChanged?: number;
}

/**
 * 
 * @export
 * @interface FileInfoUpdate
 */
export interface FileInfoUpdate {
    /**
     * 
     * @type {number}
     * @memberof FileInfoUpdate
     */
    ID?: number;
    /**
     * 
     * @type {string}
     * @memberof FileInfoUpdate
     */
    path?: string;
    /**
     * 
     * @type {string}
     * @memberof FileInfoUpdate
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FileInfoUpdate
     */
    isDir?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FileInfoUpdate
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof FileInfoUpdate
     */
    ownerID?: number;
    /**
     * 
     * @type {string}
     * @memberof FileInfoUpdate
     */
    mimeType?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FileInfoUpdate
     */
    starred?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FileInfoUpdate
     */
    parentID?: number;
    /**
     * 
     * @type {number}
     * @memberof FileInfoUpdate
     */
    shareID?: number;
    /**
     * 
     * @type {number}
     * @memberof FileInfoUpdate
     */
    lastChanged?: number;
}

/**
 * 
 * @export
 * @interface FileList
 */
export interface FileList {
    /**
     * 
     * @type {Array&lt;FileInfo&gt;}
     * @memberof FileList
     */
    files?: Array<FileInfo>;
}

/**
 * 
 * @export
 * @interface LoginData
 */
export interface LoginData {
    /**
     * 
     * @type {string}
     * @memberof LoginData
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginData
     */
    password?: string;
}

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface PathList
 */
export interface PathList {
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof PathList
     */
    paths?: Array<string>;
}

/**
 * 
 * @export
 * @interface SearchRequest
 */
export interface SearchRequest {
    /**
     * 
     * @type {string}
     * @memberof SearchRequest
     */
    keyword?: string;
}

/**
 * 
 * @export
 * @interface ShareRequest
 */
export interface ShareRequest {
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof ShareRequest
     */
    paths?: Array<string>;
    /**
     * 
     * @type {Array&lt;number&gt;}
     * @memberof ShareRequest
     */
    users?: Array<number>;
}

/**
 * 
 * @export
 * @interface SystemStats
 */
export interface SystemStats {
    /**
     * 
     * @type {string}
     * @memberof SystemStats
     */
    version?: string;
    /**
     * 
     * @type {number}
     * @memberof SystemStats
     */
    allocMem?: number;
    /**
     * 
     * @type {number}
     * @memberof SystemStats
     */
    totalAllocMem?: number;
    /**
     * 
     * @type {number}
     * @memberof SystemStats
     */
    systemMem?: number;
    /**
     * 
     * @type {number}
     * @memberof SystemStats
     */
    numGC?: number;
    /**
     * 
     * @type {string}
     * @memberof SystemStats
     */
    goVersion?: string;
    /**
     * 
     * @type {number}
     * @memberof SystemStats
     */
    numGoroutines?: number;
    /**
     * 
     * @type {number}
     * @memberof SystemStats
     */
    numSessions?: number;
    /**
     * 
     * @type {number}
     * @memberof SystemStats
     */
    uptime?: number;
}

/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    token?: string;
}

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    ID?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    isAdmin?: boolean;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    createdAt?: number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    updatedAt?: number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    lastSessionAt?: number;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    hasAvatar?: boolean;
}

/**
 * 
 * @export
 * @interface UserUpdate
 */
export interface UserUpdate {
    /**
     * 
     * @type {number}
     * @memberof UserUpdate
     */
    ID?: number;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    password?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserUpdate
     */
    isAdmin?: boolean;
    /**
     * 
     * @type {number}
     * @memberof UserUpdate
     */
    createdAt?: number;
    /**
     * 
     * @type {number}
     * @memberof UserUpdate
     */
    updatedAt?: number;
    /**
     * 
     * @type {number}
     * @memberof UserUpdate
     */
    lastSessionAt?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UserUpdate
     */
    hasAvatar?: boolean;
}


/**
 * AuthApi - fetch parameter creator
 * @export
 */
export const AuthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login with existing user
         * @param {LoginData} credentials Credentials for login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(credentials: LoginData, options: any = {}): FetchArgs {
            // verify required parameter 'credentials' is not null or undefined
            if (credentials === null || credentials === undefined) {
                throw new RequiredError('credentials','Required parameter credentials was null or undefined when calling login.');
            }
            const localVarPath = `/auth/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LoginData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(credentials || {}) : (credentials || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options: any = {}): FetchArgs {
            const localVarPath = `/auth/logout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("TokenAuth", ["user"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Signup as a new user
         * @param {User} user User that should be registered
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup(user: User, options: any = {}): FetchArgs {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling signup.');
            }
            const localVarPath = `/auth/signup`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"User" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(user || {}) : (user || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login with existing user
         * @param {LoginData} credentials Credentials for login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(credentials: LoginData, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Token> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).login(credentials, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Logout current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).logout(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Signup as a new user
         * @param {User} user User that should be registered
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup(user: User, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Token> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).signup(user, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Login with existing user
         * @param {LoginData} credentials Credentials for login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(credentials: LoginData, options?: any) {
            return AuthApiFp(configuration).login(credentials, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Logout current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any) {
            return AuthApiFp(configuration).logout(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Signup as a new user
         * @param {User} user User that should be registered
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup(user: User, options?: any) {
            return AuthApiFp(configuration).signup(user, options)(fetch, basePath);
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Login with existing user
     * @param {} credentials Credentials for login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(credentials: LoginData, options?: any) {
        return AuthApiFp(this.configuration).login(credentials, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Logout current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public logout(options?: any) {
        return AuthApiFp(this.configuration).logout(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Signup as a new user
     * @param {} user User that should be registered
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public signup(user: User, options?: any) {
        return AuthApiFp(this.configuration).signup(user, options)(this.fetch, this.basePath);
    }

}

/**
 * FileApi - fetch parameter creator
 * @export
 */
export const FileApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new file/folder
         * @param {FileInfo} fileInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFile(fileInfo: FileInfo, options: any = {}): FetchArgs {
            // verify required parameter 'fileInfo' is not null or undefined
            if (fileInfo === null || fileInfo === undefined) {
                throw new RequiredError('fileInfo','Required parameter fileInfo was null or undefined when calling createFile.');
            }
            const localVarPath = `/file`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("TokenAuth", ["user"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"FileInfo" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(fileInfo || {}) : (fileInfo || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete file/folder
         * @param {string} path Path to fileInfo to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile(path: string, options: any = {}): FetchArgs {
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new RequiredError('path','Required parameter path was null or undefined when calling deleteFile.');
            }
            const localVarPath = `/file`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("TokenAuth", ["user"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Downloads a file.
         * @param {string} path Path to the file to download
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile(path: string, options: any = {}): FetchArgs {
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new RequiredError('path','Required parameter path was null or undefined when calling downloadFile.');
            }
            const localVarPath = `/download`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("TokenAuth", ["user"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get fileInfo of requested path
         * @param {string} path Path to requested fileInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileInfo(path: string, options: any = {}): FetchArgs {
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new RequiredError('path','Required parameter path was null or undefined when calling getFileInfo.');
            }
            const localVarPath = `/file`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("TokenAuth", ["user"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rescan own data folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescanCurrentUser(options: any = {}): FetchArgs {
            const localVarPath = `/rescan/me`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("TokenAuth", ["user"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rescan data folder by user id
         * @param {number} id The user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescanUserByID(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling rescanUserByID.');
            }
            const localVarPath = `/rescan/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("TokenAuth", ["admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search files/folders
         * @param {SearchRequest} searchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFile(searchRequest: SearchRequest, options: any = {}): FetchArgs {
            // verify required parameter 'searchRequest' is not null or undefined
            if (searchRequest === null || searchRequest === undefined) {
                throw new RequiredError('searchRequest','Required parameter searchRequest was null or undefined when calling searchFile.');
            }
            const localVarPath = `/search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("TokenAuth", ["user"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SearchRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(searchRequest || {}) : (searchRequest || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Share files/folders
         * @param {ShareRequest} shareRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareFile(shareRequest: ShareRequest, options: any = {}): FetchArgs {
            // verify required parameter 'shareRequest' is not null or undefined
            if (shareRequest === null || shareRequest === undefined) {
                throw new RequiredError('shareRequest','Required parameter shareRequest was null or undefined when calling shareFile.');
            }
            const localVarPath = `/share`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("TokenAuth", ["user"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ShareRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(shareRequest || {}) : (shareRequest || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get starred files/folders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        starredFiles(options: any = {}): FetchArgs {
            const localVarPath = `/starred`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("TokenAuth", ["user"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update file/folder
         * @param {string} path Path to fileInfo to update
         * @param {FileInfoUpdate} fileInfoUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFile(path: string, fileInfoUpdate: FileInfoUpdate, options: any = {}): FetchArgs {
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new RequiredError('path','Required parameter path was null or undefined when calling updateFile.');
            }
            // verify required parameter 'fileInfoUpdate' is not null or undefined
            if (fileInfoUpdate === null || fileInfoUpdate === undefined) {
                throw new RequiredError('fileInfoUpdate','Required parameter fileInfoUpdate was null or undefined when calling updateFile.');
            }
            const localVarPath = `/file`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("TokenAuth", ["user"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"FileInfoUpdate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(fileInfoUpdate || {}) : (fileInfoUpdate || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Uploads a file.
         * @param {string} path Path where to upload file
         * @param {any} [upfile] The file to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(path: string, upfile?: any, options: any = {}): FetchArgs {
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new RequiredError('path','Required parameter path was null or undefined when calling uploadFile.');
            }
            const localVarPath = `/upload`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            // authentication TokenAuth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("TokenAuth", ["user"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (upfile !== undefined) {
                localVarFormParams.set('upfile', upfile as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a zip archive from files
         * @param {PathList} paths 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zipFiles(paths: PathList, options: any = {}): FetchArgs {
            // verify required parameter 'paths' is not null or undefined
            if (paths === null || paths === undefined) {
                throw new RequiredError('paths','Required parameter paths was null or undefined when calling zipFiles.');
            }
            const localVarPath = `/zip`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("TokenAuth", ["user"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PathList" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(paths || {}) : (paths || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new file/folder
         * @param {FileInfo} fileInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFile(fileInfo: FileInfo, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).createFile(fileInfo, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete file/folder
         * @param {string} path Path to fileInfo to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile(path: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).deleteFile(path, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Downloads a file.
         * @param {string} path Path to the file to download
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile(path: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).downloadFile(path, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get fileInfo of requested path
         * @param {string} path Path to requested fileInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileInfo(path: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FileInfo> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).getFileInfo(path, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Rescan own data folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescanCurrentUser(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).rescanCurrentUser(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Rescan data folder by user id
         * @param {number} id The user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescanUserByID(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).rescanUserByID(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Search files/folders
         * @param {SearchRequest} searchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFile(searchRequest: SearchRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FileList> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).searchFile(searchRequest, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Share files/folders
         * @param {ShareRequest} shareRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareFile(shareRequest: ShareRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).shareFile(shareRequest, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get starred files/folders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        starredFiles(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FileList> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).starredFiles(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update file/folder
         * @param {string} path Path to fileInfo to update
         * @param {FileInfoUpdate} fileInfoUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFile(path: string, fileInfoUpdate: FileInfoUpdate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).updateFile(path, fileInfoUpdate, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Uploads a file.
         * @param {string} path Path where to upload file
         * @param {any} [upfile] The file to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(path: string, upfile?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).uploadFile(path, upfile, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a zip archive from files
         * @param {PathList} paths 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zipFiles(paths: PathList, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).zipFiles(paths, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create new file/folder
         * @param {FileInfo} fileInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFile(fileInfo: FileInfo, options?: any) {
            return FileApiFp(configuration).createFile(fileInfo, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete file/folder
         * @param {string} path Path to fileInfo to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile(path: string, options?: any) {
            return FileApiFp(configuration).deleteFile(path, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Downloads a file.
         * @param {string} path Path to the file to download
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile(path: string, options?: any) {
            return FileApiFp(configuration).downloadFile(path, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get fileInfo of requested path
         * @param {string} path Path to requested fileInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileInfo(path: string, options?: any) {
            return FileApiFp(configuration).getFileInfo(path, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Rescan own data folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescanCurrentUser(options?: any) {
            return FileApiFp(configuration).rescanCurrentUser(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Rescan data folder by user id
         * @param {number} id The user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescanUserByID(id: number, options?: any) {
            return FileApiFp(configuration).rescanUserByID(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Search files/folders
         * @param {SearchRequest} searchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFile(searchRequest: SearchRequest, options?: any) {
            return FileApiFp(configuration).searchFile(searchRequest, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Share files/folders
         * @param {ShareRequest} shareRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareFile(shareRequest: ShareRequest, options?: any) {
            return FileApiFp(configuration).shareFile(shareRequest, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get starred files/folders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        starredFiles(options?: any) {
            return FileApiFp(configuration).starredFiles(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update file/folder
         * @param {string} path Path to fileInfo to update
         * @param {FileInfoUpdate} fileInfoUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFile(path: string, fileInfoUpdate: FileInfoUpdate, options?: any) {
            return FileApiFp(configuration).updateFile(path, fileInfoUpdate, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Uploads a file.
         * @param {string} path Path where to upload file
         * @param {any} [upfile] The file to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(path: string, upfile?: any, options?: any) {
            return FileApiFp(configuration).uploadFile(path, upfile, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a zip archive from files
         * @param {PathList} paths 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zipFiles(paths: PathList, options?: any) {
            return FileApiFp(configuration).zipFiles(paths, options)(fetch, basePath);
        },
    };
};

/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export class FileApi extends BaseAPI {
    /**
     * 
     * @summary Create new file/folder
     * @param {} fileInfo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public createFile(fileInfo: FileInfo, options?: any) {
        return FileApiFp(this.configuration).createFile(fileInfo, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete file/folder
     * @param {} path Path to fileInfo to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public deleteFile(path: string, options?: any) {
        return FileApiFp(this.configuration).deleteFile(path, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Downloads a file.
     * @param {} path Path to the file to download
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public downloadFile(path: string, options?: any) {
        return FileApiFp(this.configuration).downloadFile(path, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get fileInfo of requested path
     * @param {} path Path to requested fileInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public getFileInfo(path: string, options?: any) {
        return FileApiFp(this.configuration).getFileInfo(path, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Rescan own data folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public rescanCurrentUser(options?: any) {
        return FileApiFp(this.configuration).rescanCurrentUser(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Rescan data folder by user id
     * @param {} id The user id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public rescanUserByID(id: number, options?: any) {
        return FileApiFp(this.configuration).rescanUserByID(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Search files/folders
     * @param {} searchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public searchFile(searchRequest: SearchRequest, options?: any) {
        return FileApiFp(this.configuration).searchFile(searchRequest, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Share files/folders
     * @param {} shareRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public shareFile(shareRequest: ShareRequest, options?: any) {
        return FileApiFp(this.configuration).shareFile(shareRequest, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get starred files/folders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public starredFiles(options?: any) {
        return FileApiFp(this.configuration).starredFiles(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update file/folder
     * @param {} path Path to fileInfo to update
     * @param {} fileInfoUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public updateFile(path: string, fileInfoUpdate: FileInfoUpdate, options?: any) {
        return FileApiFp(this.configuration).updateFile(path, fileInfoUpdate, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Uploads a file.
     * @param {} path Path where to upload file
     * @param {} [upfile] The file to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public uploadFile(path: string, upfile?: any, options?: any) {
        return FileApiFp(this.configuration).uploadFile(path, upfile, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a zip archive from files
     * @param {} paths 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public zipFiles(paths: PathList, options?: any) {
        return FileApiFp(this.configuration).zipFiles(paths, options)(this.fetch, this.basePath);
    }

}

/**
 * SystemApi - fetch parameter creator
 * @export
 */
export const SystemApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get system status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemStats(options: any = {}): FetchArgs {
            const localVarPath = `/system/stats`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("TokenAuth", ["admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get system status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemStats(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SystemStats> {
            const localVarFetchArgs = SystemApiFetchParamCreator(configuration).getSystemStats(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get system status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemStats(options?: any) {
            return SystemApiFp(configuration).getSystemStats(options)(fetch, basePath);
        },
    };
};

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
    /**
     * 
     * @summary Get system status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public getSystemStats(options?: any) {
        return SystemApiFp(this.configuration).getSystemStats(options)(this.fetch, this.basePath);
    }

}

/**
 * UserApi - fetch parameter creator
 * @export
 */
export const UserApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCurrentUser(options: any = {}): FetchArgs {
            const localVarPath = `/user/me`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("TokenAuth", ["user"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete user by id
         * @param {number} id The user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserByID(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUserByID.');
            }
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("TokenAuth", ["admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options: any = {}): FetchArgs {
            const localVarPath = `/user/me`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("TokenAuth", ["user"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get specific user by id
         * @param {number} id The user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByID(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUserByID.');
            }
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("TokenAuth", ["admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Modify current user
         * @param {User} userInfo Updated user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUser(userInfo: User, options: any = {}): FetchArgs {
            // verify required parameter 'userInfo' is not null or undefined
            if (userInfo === null || userInfo === undefined) {
                throw new RequiredError('userInfo','Required parameter userInfo was null or undefined when calling updateCurrentUser.');
            }
            const localVarPath = `/user/me`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("TokenAuth", ["user"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"User" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(userInfo || {}) : (userInfo || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Modify user by id
         * @param {number} id The user id
         * @param {UserUpdate} userUpdate Updated user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserByID(id: number, userUpdate: UserUpdate, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateUserByID.');
            }
            // verify required parameter 'userUpdate' is not null or undefined
            if (userUpdate === null || userUpdate === undefined) {
                throw new RequiredError('userUpdate','Required parameter userUpdate was null or undefined when calling updateUserByID.');
            }
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("TokenAuth", ["admin"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserUpdate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(userUpdate || {}) : (userUpdate || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCurrentUser(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).deleteCurrentUser(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete user by id
         * @param {number} id The user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserByID(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).deleteUserByID(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getCurrentUser(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get specific user by id
         * @param {number} id The user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByID(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getUserByID(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Modify current user
         * @param {User} userInfo Updated user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUser(userInfo: User, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).updateCurrentUser(userInfo, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Modify user by id
         * @param {number} id The user id
         * @param {UserUpdate} userUpdate Updated user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserByID(id: number, userUpdate: UserUpdate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).updateUserByID(id, userUpdate, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Delete current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCurrentUser(options?: any) {
            return UserApiFp(configuration).deleteCurrentUser(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete user by id
         * @param {number} id The user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserByID(id: number, options?: any) {
            return UserApiFp(configuration).deleteUserByID(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: any) {
            return UserApiFp(configuration).getCurrentUser(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get specific user by id
         * @param {number} id The user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByID(id: number, options?: any) {
            return UserApiFp(configuration).getUserByID(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Modify current user
         * @param {User} userInfo Updated user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUser(userInfo: User, options?: any) {
            return UserApiFp(configuration).updateCurrentUser(userInfo, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Modify user by id
         * @param {number} id The user id
         * @param {UserUpdate} userUpdate Updated user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserByID(id: number, userUpdate: UserUpdate, options?: any) {
            return UserApiFp(configuration).updateUserByID(id, userUpdate, options)(fetch, basePath);
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Delete current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteCurrentUser(options?: any) {
        return UserApiFp(this.configuration).deleteCurrentUser(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete user by id
     * @param {} id The user id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUserByID(id: number, options?: any) {
        return UserApiFp(this.configuration).deleteUserByID(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getCurrentUser(options?: any) {
        return UserApiFp(this.configuration).getCurrentUser(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get specific user by id
     * @param {} id The user id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserByID(id: number, options?: any) {
        return UserApiFp(this.configuration).getUserByID(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Modify current user
     * @param {} userInfo Updated user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateCurrentUser(userInfo: User, options?: any) {
        return UserApiFp(this.configuration).updateCurrentUser(userInfo, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Modify user by id
     * @param {} id The user id
     * @param {} userUpdate Updated user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUserByID(id: number, userUpdate: UserUpdate, options?: any) {
        return UserApiFp(this.configuration).updateUserByID(id, userUpdate, options)(this.fetch, this.basePath);
    }

}

